const { createIndependentModules } = require('eslint-plugin-project-structure');

module.exports = {
  root: true,
  env: {
    browser: true,
    jest: true,
  },
  settings: {
    'import/resolver': {
      typescript: {
        alwaysTryTypes: true,
      },
    },
    polyfills: ['fetch', 'Map', 'Set', 'Promise', 'Promise', 'Symbol', 'String', 'Array', 'Math', 'Object', 'URL', 'URLSearchParams'],
    react: {
      version: 'detect',
    },
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: `${__dirname}/tsconfig.json`,
    ecmaFeatures: {
      jsx: true,
    },
  },
  extends: [
    'plugin:prettier/recommended',
    'plugin:import/typescript',
    'plugin:compat/recommended',
    'prettier',
    'plugin:react-hooks/recommended',
  ],
  plugins: [
    '@typescript-eslint',
    'prettier',
    'import',
    'compat',
    'unicorn',
    'sonarjs',
    'react',
    'react-hooks',
    'project-structure',
    'typescript-sort-keys',
  ],
  ignorePatterns: ['.eslintrc.js', '*.d.ts', 'dist', 'node_modules', 'jest.setup.js', 'jest.config.js'],
  rules: {
    'typescript-sort-keys/interface': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    'prettier/prettier': 'error',
    'prefer-const': 'error',
    'no-const-assign': 'error',
    'no-var': 'error',
    'no-new-object': 'error',
    'object-shorthand': ['error', 'always'],
    'quote-props': ['error', 'as-needed'],
    'no-prototype-builtins': 'error',
    'array-callback-return': 'error',
    'prefer-destructuring': [
      'error',
      {
        VariableDeclarator: {
          array: false,
          object: true,
        },
        AssignmentExpression: {
          array: false,
          object: false,
        },
      },
    ],
    'template-curly-spacing': ['error', 'never'],
    'no-useless-escape': 'error',
    'no-eval': 'error',
    'func-style': ['error', 'expression'],
    'prefer-rest-params': 'error',
    'no-new-func': 'error',
    'no-param-reassign': 'error',
    'prefer-spread': 'error',
    'prefer-arrow-callback': 'error',
    'arrow-spacing': 'error',
    'arrow-parens': ['error', 'as-needed'],
    'arrow-body-style': ['error', 'as-needed'],
    'no-iterator': 'error',
    'generator-star-spacing': 'error',
    'one-var': ['error', 'never'],
    'no-multi-assign': 'error',
    'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
    'operator-linebreak': 'error',
    'max-len': [
      'error',
      {
        code: 140,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      },
    ],
    'no-unused-vars': 'off',
    eqeqeq: 'error',
    'no-case-declarations': 'error',
    'no-nested-ternary': 'error',
    'no-unneeded-ternary': 'error',
    'nonblock-statement-body-position': 'error',
    'no-else-return': 'error',
    'space-infix-ops': 'off',
    'eol-last': 'error',
    'padded-blocks': ['error', 'never'],
    'array-bracket-spacing': ['error', 'never'],
    'object-curly-spacing': 'off',
    'comma-dangle': 'off',
    'no-new-wrappers': 'error',
    'new-cap': 'error',
    'no-underscore-dangle': 'error',
    'jsx-quotes': ['error', 'prefer-double'],
    'getter-return': 'error',
    'no-await-in-loop': 'error',
    'no-cond-assign': 'error',
    'no-console': ['error', { allow: ['log', 'error'] }],
    'no-constant-condition': 'error',
    'no-debugger': 'error',
    'no-dupe-args': 'error',
    'no-dupe-else-if': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-empty': 'error',
    'no-ex-assign': 'error',
    'no-extra-boolean-cast': 'error',
    'no-func-assign': 'error',
    'no-invalid-regexp': 'error',
    'no-obj-calls': 'error',
    'no-setter-return': 'error',
    'no-sparse-arrays': 'error',
    'no-template-curly-in-string': 'error',
    'no-unreachable': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-negation': 'error',
    'require-atomic-updates': 'error',
    'use-isnan': 'error',
    'valid-typeof': 'error',
    'block-scoped-var': 'error',
    'default-case': 'error',
    'no-alert': 'error',
    // "complexity": ["error", 20],
    'guard-for-in': 'error',
    'no-empty-pattern': 'error',
    'no-extend-native': 'error',
    'no-fallthrough': 'error',
    'no-floating-decimal': 'error',
    'no-lone-blocks': 'error',
    'no-loop-func': 'off',
    'no-redeclare': 'off',
    'no-return-assign': 'error',
    'no-self-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-useless-catch': 'error',
    'no-useless-concat': 'error',
    'prefer-regex-literals': 'error',
    radix: ['error', 'as-needed'],
    yoda: 'error',
    'no-delete-var': 'error',
    'no-shadow': 'off',
    'max-depth': 'error',
    'no-lonely-if': 'error',
    'no-negated-condition': 'error',
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: '*', next: ['const', 'let'] },
      { blankLine: 'always', prev: ['const', 'let'], next: '*' },
      { blankLine: 'any', prev: ['const', 'let'], next: ['const', 'let'] },
      {
        blankLine: 'always',
        prev: '*',
        next: ['if', 'for', 'while', 'switch', 'try'],
      },
      {
        blankLine: 'always',
        prev: ['if', 'for', 'while', 'switch', 'try'],
        next: '*',
      },
      { blankLine: 'always', prev: '*', next: ['return', 'throw'] },
    ],
    'sort-keys': 'off',
    'sort-imports': 'off',
    'max-classes-per-file': ['error', 10],

    'block-spacing': 'off',
    'space-before-blocks': 'error',
    'space-unary-ops': ['error', { words: true, nonwords: false }],
    'spaced-comment': [
      'error',
      'always',
      {
        line: {
          markers: ['/'],
          exceptions: ['-', '+'],
        },
        block: {
          markers: ['!'],
          exceptions: ['*'],
          balanced: true,
        },
      },
    ],
    'no-irregular-whitespace': 'error',
    'no-unsafe-optional-chaining': 'error',
    'brace-style': 'off',
    'comma-spacing': 'off',
    'default-param-last': 'off',
    'dot-notation': 'off',
    'func-call-spacing': 'off',
    'init-declarations': 'off',
    'keyword-spacing': 'off',
    'no-array-constructor': 'off',
    'no-dupe-class-members': 'off',
    'no-empty-function': 'off',
    'no-extra-semi': 'off',
    quotes: 'off',
    'require-await': 'off',
    'no-return-await': 'off',
    semi: 'error',
    'space-before-function-paren': 'off',
    'no-duplicate-imports': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variableLike',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
        leadingUnderscore: 'allow',
      },
      { selector: 'typeAlias', format: ['PascalCase'] },
      {
        selector: 'typeAlias',
        format: ['StrictPascalCase'],
        prefix: ['T', 'V', 'K', 'U'],
      },
      { selector: 'enum', format: ['UPPER_CASE'] },
      { selector: 'enumMember', format: ['UPPER_CASE'] },
    ],
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/brace-style': ['error', '1tbs', { allowSingleLine: true }],
    '@typescript-eslint/comma-spacing': ['error', { before: false, after: true }],
    '@typescript-eslint/consistent-type-assertions': [
      'error',
      {
        assertionStyle: 'as',
        objectLiteralTypeAssertions: 'allow-as-parameter',
      },
    ],
    '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
    '@typescript-eslint/default-param-last': ['error'],
    '@typescript-eslint/dot-notation': 'error',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-member-accessibility': 'off',
    '@typescript-eslint/func-call-spacing': ['error'],
    '@typescript-eslint/init-declarations': ['off'],
    '@typescript-eslint/keyword-spacing': ['error', { before: true, after: true }],
    '@typescript-eslint/member-delimiter-style': [
      'error',
      {
        multiline: {
          delimiter: 'semi',
          requireLast: true,
        },
        singleline: {
          delimiter: 'semi',
          requireLast: false,
        },
      },
    ],
    '@typescript-eslint/member-ordering': ['error', { default: ['signature', 'static-field', 'static-method'] }],
    '@typescript-eslint/method-signature-style': ['error', 'method'],
    '@typescript-eslint/no-array-constructor': ['error'],
    '@typescript-eslint/no-dupe-class-members': ['error'],
    '@typescript-eslint/no-dynamic-delete': 'error',
    '@typescript-eslint/no-empty-function': ['error', { allow: ['arrowFunctions', 'decoratedFunctions'] }],
    '@typescript-eslint/no-empty-interface': 'warn',
    '@typescript-eslint/no-extra-non-null-assertion': 'error',
    '@typescript-eslint/no-extra-semi': ['error'],
    '@typescript-eslint/no-extraneous-class': 'error',
    '@typescript-eslint/no-floating-promises': [
      'error',
      {
        ignoreVoid: true,
      },
    ],
    '@typescript-eslint/no-for-in-array': 'error',
    '@typescript-eslint/no-implied-eval': 'error',
    '@typescript-eslint/no-inferrable-types': [
      'error',
      {
        ignoreParameters: true,
        ignoreProperties: true,
      },
    ],
    '@typescript-eslint/no-misused-new': 'error',
    '@typescript-eslint/no-misused-promises': [
      'error',
      {
        checksVoidReturn: false,
        checksConditionals: true,
      },
    ],
    '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-type-arguments': 'error',
    '@typescript-eslint/no-unnecessary-type-assertion': 'error',
    // '@typescript-eslint/no-unsafe-call': 'error',
    '@typescript-eslint/no-use-before-define': 'error',
    '@typescript-eslint/no-var-requires': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-includes': 'error',
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-reduce-type-parameter': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/quotes': ['error', 'single'],
    '@typescript-eslint/require-array-sort-compare': 'error',
    '@typescript-eslint/require-await': 'error',
    '@typescript-eslint/restrict-plus-operands': 'error',
    '@typescript-eslint/restrict-template-expressions': ['error', { allowNumber: true, allowAny: true }],
    '@typescript-eslint/return-await': ['error', 'in-try-catch'],
    '@typescript-eslint/semi': ['error'],
    '@typescript-eslint/space-before-function-paren': [
      'error',
      {
        anonymous: 'ignore',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    '@typescript-eslint/switch-exhaustiveness-check': 'error',
    '@typescript-eslint/type-annotation-spacing': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    '@typescript-eslint/prefer-enum-initializers': 'error',
    '@typescript-eslint/consistent-type-imports': 'error',
    '@typescript-eslint/no-duplicate-imports': 'error',
    '@typescript-eslint/no-redeclare': 'error',
    '@typescript-eslint/no-shadow': 'error',
    '@typescript-eslint/ban-tslint-comment': 'error',
    '@typescript-eslint/ban-ts-comment': ['error', { minimumDescriptionLength: 10 }],
    '@typescript-eslint/no-loop-func': 'error',
    '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
    '@typescript-eslint/no-invalid-void-type': ['error', { allowInGenericTypeArguments: true }],
    '@typescript-eslint/consistent-indexed-object-style': 'error',
    '@typescript-eslint/ban-types': [
      'error',
      {
        types: {
          // object typing
          Object: {
            message: [
              'The `Object` type actually means "any non-nullish value", so it is marginally better than `unknown`.',
              '- If you want a type meaning "any object", you probably want `Record<string, unknown>` instead.',
              '- If you want a type meaning "any value", you probably want `unknown` instead.',
            ].join('\n'),
            fixWith: 'Record<string, unknown>',
          },
          '{}': {
            message: [
              '`{}` actually means "any non-nullish value".',
              '- If you want a type meaning "any object", you probably want `Record<string, unknown>` instead.',
              '- If you want a type meaning "any value", you probably want `unknown` instead.',
            ].join('\n'),
            fixWith: 'Record<string, unknown>',
          },
          object: {
            message: [
              'The `object` type is currently hard to use ([see this issue](https://github.com/microsoft/TypeScript/issues/21732)).',
              'Consider using `Record<string, unknown>` instead, as it allows you to more easily inspect and use the keys.',
            ].join('\n'),
            fixWith: 'Record<string, unknown>',
          },
          '[]': {
            message: [
              '`[]` actually means "any non-nullish array".',
              '- If you want a type meaning "array of any objects", you probably want `unknown[]` instead.',
            ].join('\n'),
            fixWith: 'unknown[]',
          },
        },
      },
    ],
    '@typescript-eslint/no-unnecessary-type-constraint': 'error',
    '@typescript-eslint/space-infix-ops': 'error',
    '@typescript-eslint/no-confusing-void-expression': ['error', { ignoreArrowShorthand: true }],
    '@typescript-eslint/no-unused-vars': [
      'warn',
      {
        args: 'after-used',
        ignoreRestSiblings: true,
        varsIgnorePattern: '^_',
        argsIgnorePattern: '^_',
      },
    ],
    '@typescript-eslint/sort-type-union-intersection-members': 'error',
    '@typescript-eslint/object-curly-spacing': ['error', 'always'],
    'import/no-mutable-exports': 2,
    'import/first': 2,
    // 'import/extensions': 2, ругается на bg2.jpg
    'import/newline-after-import': ['error', { count: 1 }],
    'import/no-anonymous-default-export': [
      'error',
      {
        allowArray: true,
        allowArrowFunction: true,
        allowAnonymousClass: false,
        allowAnonymousFunction: false,
        allowLiteral: true,
        allowObject: true,
      },
    ],
    'import/no-named-as-default-member': 'error',
    // 'import/no-named-as-default': 'error',
    'import/no-named-default': 'error',
    'import/no-deprecated': 'warn',
    'unicorn/better-regex': 'error',
    'unicorn/error-message': 'error',
    // 'unicorn/expiring-todo-comments': 'error',
    'unicorn/explicit-length-check': [
      'error',
      {
        'non-zero': 'greater-than',
      },
    ],
    'unicorn/filename-case': ['error', { case: 'kebabCase' }],
    'unicorn/import-index': 'error',
    'unicorn/no-abusive-eslint-disable': 'error',
    'unicorn/no-array-instanceof': 'error',
    'unicorn/no-for-loop': 'error',
    'unicorn/no-unreadable-array-destructuring': 'error',
    'unicorn/no-useless-undefined': ['error', { checkArguments: false }],
    'unicorn/prefer-includes': 'error',
    'unicorn/prefer-starts-ends-with': 'error',
    'unicorn/prefer-array-find': 'error',
    'unicorn/no-object-as-default-parameter': 'error',
    'unicorn/import-style': 'error',
    'unicorn/prefer-math-trunc': 'error',
    'unicorn/numeric-separators-style': 'error',
    'unicorn/prefer-ternary': ['error', 'only-single-line'],
    'unicorn/prefer-date-now': 'error',
    'unicorn/empty-brace-spaces': 'error',
    'unicorn/no-lonely-if': 'error',
    'unicorn/prefer-array-some': 'error',
    'unicorn/prefer-default-parameters': 'error',
    'unicorn/prefer-array-index-of': 'error',
    'unicorn/no-array-push-push': 'error',
    'unicorn/no-this-assignment': 'error',
    'unicorn/no-static-only-class': 'error',
    // "unicorn/consistent-destructuring": "error",
    'sonarjs/no-all-duplicated-branches': 'error',
    'sonarjs/no-element-overwrite': 'error',
    'sonarjs/no-identical-expressions': 'error',
    'sonarjs/no-one-iteration-loop': 'error',
    'sonarjs/no-use-of-empty-return-value': 'error',
    'sonarjs/no-collapsible-if': 'error',
    'sonarjs/no-duplicate-string': 'error',
    'sonarjs/no-duplicated-branches': 'error',
    // 'sonarjs/no-identical-functions': 'error',
    'sonarjs/no-inverted-boolean-check': 'error',
    'sonarjs/no-redundant-jump': 'error',
    'sonarjs/no-unused-collection': 'error',
    'sonarjs/prefer-single-boolean-return': 'error',
    '@typescript-eslint/no-restricted-imports': [
      'error',
      {
        paths: [
          {
            name: 'enzyme',
            message: 'Please use @testing-library',
          },
        ],
      },
    ],

    'react/prop-types': 'error',
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'react/no-array-index-key': 'error',
    'react/jsx-boolean-value': ['error', 'never'],
    'react/jsx-pascal-case': ['error', { allowAllCaps: true }],
    'react/jsx-closing-bracket-location': 'error',
    'react/jsx-closing-tag-location': 'error',
    'react/no-string-refs': 'error',
    'react/jsx-wrap-multilines': 'error',
    'react/jsx-no-bind': [
      'error',
      {
        ignoreDOMComponents: true,
        ignoreRefs: true,
        allowArrowFunctions: true,
      },
    ],
    'react/sort-comp': 'error',
    // "react/destructuring-assignment": [
    //   "error",
    //   "always",
    //   { ignoreClassFields: true },
    // ],
    'react/display-name': 'error',
    'react/function-component-definition': [2, { namedComponents: 'arrow-function' }],
    'react/jsx-fragments': 'error',
    'react/jsx-no-duplicate-props': 'error',
    'react/jsx-no-script-url': 'error',
    'react/jsx-no-useless-fragment': 'error',
    'react/jsx-props-no-multi-spaces': 'error',
    'react/sort-default-props': 'error',
    'react/jsx-sort-props': ['error', { reservedFirst: true, shorthandFirst: true, callbacksLast: true }],
    'react/jsx-no-target-blank': 'error',
    'react/no-access-state-in-setstate': 'error',
    'react/no-adjacent-inline-elements': 'error',
    'react/no-children-prop': 'error',
    'react/no-deprecated': 'warn',
    'react/no-did-mount-set-state': 'error',
    'react/no-did-update-set-state': 'error',
    'react/no-direct-mutation-state': 'error',
    'react/no-multi-comp': ['error', { ignoreStateless: true }],
    'react/no-redundant-should-component-update': 'error',
    'react/no-this-in-sfc': 'error',
    // 'react/no-unknown-property': 'error',
    'react/no-unused-state': 'error',
    'react/react-in-jsx-scope': 'off',
    'react/require-render-return': 'error',
    'react/self-closing-comp': [
      'error',
      {
        component: true,
        html: true,
      },
    ],
    'react/style-prop-object': 'error',
    'react/jsx-key': 'error',
    'react/no-unstable-nested-components': ['error', { allowAsProps: true }],
    'react/jsx-no-constructed-context-values': 'warn',
    'react/prop-types': 'off',
    // 'no-restricted-imports': [
    //   'error',
    //   {
    //     patterns: [
    //       {
    //         group: ['shared/!*!/!*!/!**', 'entities/!*!/!**', 'features/!*!/!**', 'widgets/!*!/!**', 'pages/!*!/!**', 'app/!**'],
    //         message: 'Direct access to the internal parts of the module is prohibited',
    //       },
    //       {
    //         group: ['../!**!/shared', '../!**!/entities', '../!**!/features', '../!**!/widgets', '../!**!/pages', '../!**!/app'],
    //         message: 'Prefer absolute imports instead of relatives',
    //       },
    //     ],
    //   },
    // ],
    // },
    // rules: {
    'project-structure/independent-modules': [
      'error',
      {
        modules: [
          {
            name: 'Pages',
            pattern: 'pages/!**',
            allowImportsFrom: ['{family}/!**', '{shared}/!**', '{entities}/!**', '{features}/!**', '{widgets}/!**'],
          },
          {
            name: 'Widgets',
            pattern: 'widgets/!**',
            allowImportsFrom: ['{shared}/!**', '{entities}/!**', '{features}/!**', '{widgets}/!**'],
          },
          {
            name: 'Features',
            pattern: 'features/!**',
            allowImportsFrom: ['{shared}/!**', '{entities}/!**', '{features}/!**'],
          },
          {
            name: 'Entities',
            pattern: 'entities/!**',
            allowImportsFrom: ['{shared}/!**', '{entities}/!**'],
          },
          {
            name: 'Shared',
            pattern: 'shared/!**',
            allowImportsFrom: ['{shared}/!**'],
          },
        ],
        reusableImportPatterns: {
          app: ['app'],
          pages: ['pages'],
          widgets: ['widgets'],
          features: ['features'],
          entities: ['entities'],
          shared: ['shared'],
        },
      },
    ],
  },
};
